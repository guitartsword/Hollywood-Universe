/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package KevinBacon;

import java.awt.image.BufferedImage;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Point;
import java.util.ArrayList;

/**
 *
 * @author Isaias
 */
public class PanelGrafo extends javax.swing.JPanel {

    private Color transparent;
    private BufferedImage background;
    private double scale = 1.2;
    private ArrayList<Line> lines = new ArrayList();
    private ArrayList<NodeButton> nodes = new ArrayList();

    /**
     * Creates new form PanelGrafo
     */
    public PanelGrafo() {
        initComponents();
        transparent = new Color(0, 0, 0, 0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        for (Line temp : lines) {
            g.drawLine(temp.getInicio().x, temp.getInicio().y
                     , temp.getFin().x, temp.getFin().y);
        }
    }

    @Override
    public Component add(Component comp) {
        if(comp instanceof NodeButton)
            nodes.add((NodeButton) comp);
        return super.add(comp);
    }
    public void setLines(ArrayList<Line> lines){
        this.lines = lines;
    }
    public void setTransparentImage() {
        background = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_4BYTE_ABGR);
        for (int i = 0; i < background.getWidth(); i++) {
            for (int j = 0; j < background.getHeight(); j++) {
                background.setRGB(i, j, transparent.getRGB());
            }
        }
    }

    public void addImage(BufferedImage image, int x, int y) {
        try {
            BufferedImage part = background.getSubimage(x - image.getWidth() / 2, y - image.getHeight() / 2, image.getWidth(), image.getHeight());
            for (int i = 0; i < part.getWidth(); i++) {
                for (int j = 0; j < part.getHeight(); j++) {
                    int alpha = new Color(image.getRGB(i, j), true).getAlpha();
                    if (alpha > 40) {
                        part.setRGB(i, j, image.getRGB(i, j));
                    }
                }
            }
            repaint();
            System.out.println("Nueva imagen!");
        } catch (java.awt.image.RasterFormatException e) {

        }
    }

    public BufferedImage getBackgroundImage() {
        return background;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}